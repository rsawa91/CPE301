
Receive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000008d0  00000964  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800116  00800116  0000097a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000097a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b85  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009bb  00000000  00000000  00002671  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b8  00000000  00000000  0000302c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  000038e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000684  00000000  00000000  00003c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ebf  00000000  00000000  0000428c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000514b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ed       	ldi	r30, 0xD0	; 208
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  9e:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup_rf>:
			nRF24L01_listen(rf, 0, address);
		}
	}
	return 0;
}
nRF24L01 *setup_rf(void) {				//initalize the rf communication
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
	nRF24L01 *rf = nRF24L01_init();
  aa:	0e 94 21 01 	call	0x242	; 0x242 <nRF24L01_init>
  ae:	ec 01       	movw	r28, r24
	rf->ss.port = &PORTB;
  b0:	85 e2       	ldi	r24, 0x25	; 37
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	99 83       	std	Y+1, r25	; 0x01
  b6:	88 83       	st	Y, r24
	rf->ss.pin = PB2;
  b8:	22 e0       	ldi	r18, 0x02	; 2
  ba:	2a 83       	std	Y+2, r18	; 0x02
	rf->ce.port = &PORTB;
  bc:	9c 83       	std	Y+4, r25	; 0x04
  be:	8b 83       	std	Y+3, r24	; 0x03
	rf->ce.pin = PB1;
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	2d 83       	std	Y+5, r18	; 0x05
	rf->sck.port = &PORTB;
  c4:	9f 83       	std	Y+7, r25	; 0x07
  c6:	8e 83       	std	Y+6, r24	; 0x06
	rf->sck.pin = PB5;
  c8:	25 e0       	ldi	r18, 0x05	; 5
  ca:	28 87       	std	Y+8, r18	; 0x08
	rf->mosi.port = &PORTB;
  cc:	9a 87       	std	Y+10, r25	; 0x0a
  ce:	89 87       	std	Y+9, r24	; 0x09
	rf->mosi.pin = PB3;
  d0:	23 e0       	ldi	r18, 0x03	; 3
  d2:	2b 87       	std	Y+11, r18	; 0x0b
	rf->miso.port = &PORTB;
  d4:	9d 87       	std	Y+13, r25	; 0x0d
  d6:	8c 87       	std	Y+12, r24	; 0x0c
	rf->miso.pin = PB4;
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	8e 87       	std	Y+14, r24	; 0x0e
	// interrupt on falling edge of INT0 (PD2)
	EICRA |= _BV(ISC01);
  dc:	e9 e6       	ldi	r30, 0x69	; 105
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
	EIMSK |= _BV(INT0);
  e6:	e8 9a       	sbi	0x1d, 0	; 29
	nRF24L01_begin(rf);
  e8:	ce 01       	movw	r24, r28
  ea:	0e 94 11 02 	call	0x422	; 0x422 <nRF24L01_begin>
	return rf;
}
  ee:	ce 01       	movw	r24, r28
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <USART_init>:

void USART_init( unsigned int ubrr ) {
	UBRR0H = (unsigned char)(ubrr>>8);
  f6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
  fa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1 << TXEN0); // Enable receiver, transmitter & RX interrupt
  fe:	88 e0       	ldi	r24, 0x08	; 8
 100:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3 << UCSZ00); //asynchronous 8 N 1
 104:	86 e0       	ldi	r24, 0x06	; 6
 106:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 10a:	08 95       	ret

0000010c <USART_tx_string>:
}
/* SEND A STRING TO THE RS-232 */
void USART_tx_string( char *data ) {
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
	while ((*data != '\0')) {
 110:	fc 01       	movw	r30, r24
 112:	20 81       	ld	r18, Z
 114:	22 23       	and	r18, r18
 116:	69 f0       	breq	.+26     	; 0x132 <USART_tx_string+0x26>
 118:	dc 01       	movw	r26, r24
 11a:	11 96       	adiw	r26, 0x01	; 1
		while (!(UCSR0A & (1 <<UDRE0)));
 11c:	e0 ec       	ldi	r30, 0xC0	; 192
 11e:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *data;
 120:	c6 ec       	ldi	r28, 0xC6	; 198
 122:	d0 e0       	ldi	r29, 0x00	; 0
	UCSR0C = (3 << UCSZ00); //asynchronous 8 N 1
}
/* SEND A STRING TO THE RS-232 */
void USART_tx_string( char *data ) {
	while ((*data != '\0')) {
		while (!(UCSR0A & (1 <<UDRE0)));
 124:	90 81       	ld	r25, Z
 126:	95 ff       	sbrs	r25, 5
 128:	fd cf       	rjmp	.-6      	; 0x124 <USART_tx_string+0x18>
		UDR0 = *data;
 12a:	28 83       	st	Y, r18
	UCSR0B = (1 << TXEN0); // Enable receiver, transmitter & RX interrupt
	UCSR0C = (3 << UCSZ00); //asynchronous 8 N 1
}
/* SEND A STRING TO THE RS-232 */
void USART_tx_string( char *data ) {
	while ((*data != '\0')) {
 12c:	2d 91       	ld	r18, X+
 12e:	21 11       	cpse	r18, r1
 130:	f9 cf       	rjmp	.-14     	; 0x124 <USART_tx_string+0x18>
		while (!(UCSR0A & (1 <<UDRE0)));
		UDR0 = *data;
		data++;
	}
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <process_message>:

void process_message(char *message) {
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ec 01       	movw	r28, r24
	if (strcmp(message, "ON") == 0)
 13e:	6b e0       	ldi	r22, 0x0B	; 11
 140:	71 e0       	ldi	r23, 0x01	; 1
 142:	0e 94 5d 04 	call	0x8ba	; 0x8ba <strcmp>
 146:	89 2b       	or	r24, r25
 148:	11 f4       	brne	.+4      	; 0x14e <process_message+0x16>
inline void prepare_led_pin(void) {
	DDRB |= _BV(PB0);
	PORTB &= ~_BV(PB0);
}
inline void set_led_high(void) {
	PORTB |= _BV(PB0);
 14a:	28 9a       	sbi	0x05, 0	; 5
 14c:	08 c0       	rjmp	.+16     	; 0x15e <process_message+0x26>
}

void process_message(char *message) {
	if (strcmp(message, "ON") == 0)
	set_led_high();
	else if (strcmp(message, "OFF") == 0)
 14e:	6e e0       	ldi	r22, 0x0E	; 14
 150:	71 e0       	ldi	r23, 0x01	; 1
 152:	ce 01       	movw	r24, r28
 154:	0e 94 5d 04 	call	0x8ba	; 0x8ba <strcmp>
 158:	89 2b       	or	r24, r25
 15a:	09 f4       	brne	.+2      	; 0x15e <process_message+0x26>
}
inline void set_led_high(void) {
	PORTB |= _BV(PB0);
}
inline void set_led_low(void) {
	PORTB &= ~_BV(PB0);
 15c:	28 98       	cbi	0x05, 0	; 5
void process_message(char *message) {
	if (strcmp(message, "ON") == 0)
	set_led_high();
	else if (strcmp(message, "OFF") == 0)
	set_led_low();
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <main>:
inline void prepare_led_pin(void);
inline void set_led_high(void);

inline void set_led_low(void);
volatile bool rf_interrupt = false;
int main(void) {
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	ad 97       	sbiw	r28, 0x2d	; 45
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	de bf       	out	0x3e, r29	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	cd bf       	out	0x3d, r28	; 61
	uint8_t address[5] = { 0x22, 0x55, 0x33, 0x88, 0x46 };	//set address to look for
 178:	85 e0       	ldi	r24, 0x05	; 5
 17a:	e6 e0       	ldi	r30, 0x06	; 6
 17c:	f1 e0       	ldi	r31, 0x01	; 1
 17e:	de 01       	movw	r26, r28
 180:	11 96       	adiw	r26, 0x01	; 1
 182:	01 90       	ld	r0, Z+
 184:	0d 92       	st	X+, r0
 186:	8a 95       	dec	r24
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0x1e>
	set_led_high();
	else if (strcmp(message, "OFF") == 0)
	set_led_low();
}
inline void prepare_led_pin(void) {
	DDRB |= _BV(PB0);
 18a:	20 9a       	sbi	0x04, 0	; 4
	PORTB &= ~_BV(PB0);
 18c:	28 98       	cbi	0x05, 0	; 5
inline void set_led_low(void);
volatile bool rf_interrupt = false;
int main(void) {
	uint8_t address[5] = { 0x22, 0x55, 0x33, 0x88, 0x46 };	//set address to look for
	prepare_led_pin();
	sei();				//allow interrupts
 18e:	78 94       	sei
	
	USART_init(MYUBRR);		//initialize USART communication
 190:	87 e6       	ldi	r24, 0x67	; 103
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 7b 00 	call	0xf6	; 0xf6 <USART_init>
	
	nRF24L01 *rf = setup_rf();			//set rf pointer
 198:	0e 94 53 00 	call	0xa6	; 0xa6 <setup_rf>
 19c:	8c 01       	movw	r16, r24
	nRF24L01_listen(rf, 0, address);	//check for communication from given address
 19e:	ae 01       	movw	r20, r28
 1a0:	4f 5f       	subi	r20, 0xFF	; 255
 1a2:	5f 4f       	sbci	r21, 0xFF	; 255
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <nRF24L01_listen>
	uint8_t addr[5];
	nRF24L01_read_register(rf, 0x00, addr, 1);
 1ac:	21 e0       	ldi	r18, 0x01	; 1
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	ae 01       	movw	r20, r28
 1b2:	4a 5f       	subi	r20, 0xFA	; 250
 1b4:	5f 4f       	sbci	r21, 0xFF	; 255
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	c8 01       	movw	r24, r16
 1ba:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <nRF24L01_read_register>
	while (true) {
		if (rf_interrupt) {				//check rf_interrupt variable
 1be:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 1c2:	88 23       	and	r24, r24
 1c4:	e1 f3       	breq	.-8      	; 0x1be <main+0x5a>
			rf_interrupt = false;
 1c6:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
			while (nRF24L01_data_received(rf)) {		//if data is received continue into loop
 1ca:	12 c0       	rjmp	.+36     	; 0x1f0 <main+0x8c>
				nRF24L01Message msg;
				USART_tx_string((char *)msg.data);		//print temperature data to terminal
 1cc:	ce 01       	movw	r24, r28
 1ce:	0d 96       	adiw	r24, 0x0d	; 13
 1d0:	0e 94 86 00 	call	0x10c	; 0x10c <USART_tx_string>
				USART_tx_string("\r\n");				//print an endline to terminal
 1d4:	82 e1       	ldi	r24, 0x12	; 18
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 86 00 	call	0x10c	; 0x10c <USART_tx_string>
				nRF24L01_read_received_data(rf, &msg);	//get message from rf
 1dc:	be 01       	movw	r22, r28
 1de:	65 5f       	subi	r22, 0xF5	; 245
 1e0:	7f 4f       	sbci	r23, 0xFF	; 255
 1e2:	c8 01       	movw	r24, r16
 1e4:	0e 94 0c 03 	call	0x618	; 0x618 <nRF24L01_read_received_data>
				process_message((char *)msg.data);		//convert data
 1e8:	ce 01       	movw	r24, r28
 1ea:	0d 96       	adiw	r24, 0x0d	; 13
 1ec:	0e 94 9c 00 	call	0x138	; 0x138 <process_message>
	uint8_t addr[5];
	nRF24L01_read_register(rf, 0x00, addr, 1);
	while (true) {
		if (rf_interrupt) {				//check rf_interrupt variable
			rf_interrupt = false;
			while (nRF24L01_data_received(rf)) {		//if data is received continue into loop
 1f0:	c8 01       	movw	r24, r16
 1f2:	0e 94 df 01 	call	0x3be	; 0x3be <nRF24L01_data_received>
 1f6:	81 11       	cpse	r24, r1
 1f8:	e9 cf       	rjmp	.-46     	; 0x1cc <main+0x68>
				USART_tx_string((char *)msg.data);		//print temperature data to terminal
				USART_tx_string("\r\n");				//print an endline to terminal
				nRF24L01_read_received_data(rf, &msg);	//get message from rf
				process_message((char *)msg.data);		//convert data
			}
			nRF24L01_listen(rf, 0, address);
 1fa:	ae 01       	movw	r20, r28
 1fc:	4f 5f       	subi	r20, 0xFF	; 255
 1fe:	5f 4f       	sbci	r21, 0xFF	; 255
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	c8 01       	movw	r24, r16
 206:	0e 94 78 01 	call	0x2f0	; 0x2f0 <nRF24L01_listen>
 20a:	d9 cf       	rjmp	.-78     	; 0x1be <main+0x5a>

0000020c <__vector_1>:
}
inline void set_led_low(void) {
	PORTB &= ~_BV(PB0);
}
// nRF24L01 interrupt
ISR(INT0_vect) {
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	8f 93       	push	r24
	rf_interrupt = true;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 21e:	8f 91       	pop	r24
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <copy_address>:
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config |= _BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    return success;
}
 22a:	fc 01       	movw	r30, r24
 22c:	a6 2f       	mov	r26, r22
 22e:	b7 2f       	mov	r27, r23
 230:	9c 01       	movw	r18, r24
 232:	2b 5f       	subi	r18, 0xFB	; 251
 234:	3f 4f       	sbci	r19, 0xFF	; 255
 236:	91 91       	ld	r25, Z+
 238:	9d 93       	st	X+, r25
 23a:	e2 17       	cp	r30, r18
 23c:	f3 07       	cpc	r31, r19
 23e:	d9 f7       	brne	.-10     	; 0x236 <copy_address+0xc>
 240:	08 95       	ret

00000242 <nRF24L01_init>:
 242:	80 e1       	ldi	r24, 0x10	; 16
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 3c 03 	call	0x678	; 0x678 <malloc>
 24a:	20 e1       	ldi	r18, 0x10	; 16
 24c:	fc 01       	movw	r30, r24
 24e:	11 92       	st	Z+, r1
 250:	2a 95       	dec	r18
 252:	e9 f7       	brne	.-6      	; 0x24e <nRF24L01_init+0xc>
 254:	08 95       	ret

00000256 <nRF24L01_send_command>:
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	ec 01       	movw	r28, r24
 25c:	da 01       	movw	r26, r20
 25e:	e8 81       	ld	r30, Y
 260:	f9 81       	ldd	r31, Y+1	; 0x01
 262:	50 81       	ld	r21, Z
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0a 80       	ldd	r0, Y+2	; 0x02
 26a:	02 c0       	rjmp	.+4      	; 0x270 <nRF24L01_send_command+0x1a>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	0a 94       	dec	r0
 272:	e2 f7       	brpl	.-8      	; 0x26c <nRF24L01_send_command+0x16>
 274:	80 95       	com	r24
 276:	85 23       	and	r24, r21
 278:	80 83       	st	Z, r24
 27a:	6e bd       	out	0x2e, r22	; 46
 27c:	0d b4       	in	r0, 0x2d	; 45
 27e:	07 fe       	sbrs	r0, 7
 280:	fd cf       	rjmp	.-6      	; 0x27c <nRF24L01_send_command+0x26>
 282:	8e b5       	in	r24, 0x2e	; 46
 284:	8f 87       	std	Y+15, r24	; 0x0f
 286:	21 15       	cp	r18, r1
 288:	31 05       	cpc	r19, r1
 28a:	79 f0       	breq	.+30     	; 0x2aa <nRF24L01_send_command+0x54>
 28c:	fd 01       	movw	r30, r26
 28e:	2a 0f       	add	r18, r26
 290:	3b 1f       	adc	r19, r27
 292:	df 01       	movw	r26, r30
 294:	90 81       	ld	r25, Z
 296:	9e bd       	out	0x2e, r25	; 46
 298:	0d b4       	in	r0, 0x2d	; 45
 29a:	07 fe       	sbrs	r0, 7
 29c:	fd cf       	rjmp	.-6      	; 0x298 <nRF24L01_send_command+0x42>
 29e:	9e b5       	in	r25, 0x2e	; 46
 2a0:	9c 93       	st	X, r25
 2a2:	31 96       	adiw	r30, 0x01	; 1
 2a4:	e2 17       	cp	r30, r18
 2a6:	f3 07       	cpc	r31, r19
 2a8:	a1 f7       	brne	.-24     	; 0x292 <nRF24L01_send_command+0x3c>
 2aa:	e8 81       	ld	r30, Y
 2ac:	f9 81       	ldd	r31, Y+1	; 0x01
 2ae:	20 81       	ld	r18, Z
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0a 80       	ldd	r0, Y+2	; 0x02
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <nRF24L01_send_command+0x66>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	0a 94       	dec	r0
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <nRF24L01_send_command+0x62>
 2c0:	82 2b       	or	r24, r18
 2c2:	80 83       	st	Z, r24
 2c4:	8f 85       	ldd	r24, Y+15	; 0x0f
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <nRF24L01_write_register>:
 2cc:	60 62       	ori	r22, 0x20	; 32
 2ce:	0e 94 2b 01 	call	0x256	; 0x256 <nRF24L01_send_command>
 2d2:	08 95       	ret

000002d4 <nRF24L01_read_register>:
 2d4:	0e 94 2b 01 	call	0x256	; 0x256 <nRF24L01_send_command>
 2d8:	08 95       	ret

000002da <nRF24L01_no_op>:
 2da:	20 e0       	ldi	r18, 0x00	; 0
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	50 e0       	ldi	r21, 0x00	; 0
 2e2:	6f ef       	ldi	r22, 0xFF	; 255
 2e4:	0e 94 2b 01 	call	0x256	; 0x256 <nRF24L01_send_command>
 2e8:	08 95       	ret

000002ea <nRF24L01_update_status>:
 2ea:	0e 94 6d 01 	call	0x2da	; 0x2da <nRF24L01_no_op>
 2ee:	08 95       	ret

000002f0 <nRF24L01_listen>:
 2f0:	df 92       	push	r13
 2f2:	ef 92       	push	r14
 2f4:	ff 92       	push	r15
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	00 d0       	rcall	.+0      	; 0x300 <nRF24L01_listen+0x10>
 300:	00 d0       	rcall	.+0      	; 0x302 <nRF24L01_listen+0x12>
 302:	00 d0       	rcall	.+0      	; 0x304 <nRF24L01_listen+0x14>
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
 308:	7c 01       	movw	r14, r24
 30a:	d6 2e       	mov	r13, r22
 30c:	ca 01       	movw	r24, r20
 30e:	be 01       	movw	r22, r28
 310:	6f 5f       	subi	r22, 0xFF	; 255
 312:	7f 4f       	sbci	r23, 0xFF	; 255
 314:	0e 94 15 01 	call	0x22a	; 0x22a <copy_address>
 318:	6a e0       	ldi	r22, 0x0A	; 10
 31a:	6d 0d       	add	r22, r13
 31c:	25 e0       	ldi	r18, 0x05	; 5
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	ae 01       	movw	r20, r28
 322:	4f 5f       	subi	r20, 0xFF	; 255
 324:	5f 4f       	sbci	r21, 0xFF	; 255
 326:	c7 01       	movw	r24, r14
 328:	0e 94 66 01 	call	0x2cc	; 0x2cc <nRF24L01_write_register>
 32c:	21 e0       	ldi	r18, 0x01	; 1
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	ae 01       	movw	r20, r28
 332:	4a 5f       	subi	r20, 0xFA	; 250
 334:	5f 4f       	sbci	r21, 0xFF	; 255
 336:	62 e0       	ldi	r22, 0x02	; 2
 338:	c7 01       	movw	r24, r14
 33a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <nRF24L01_read_register>
 33e:	01 e0       	ldi	r16, 0x01	; 1
 340:	10 e0       	ldi	r17, 0x00	; 0
 342:	c8 01       	movw	r24, r16
 344:	02 c0       	rjmp	.+4      	; 0x34a <nRF24L01_listen+0x5a>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	da 94       	dec	r13
 34c:	e2 f7       	brpl	.-8      	; 0x346 <nRF24L01_listen+0x56>
 34e:	9e 81       	ldd	r25, Y+6	; 0x06
 350:	89 2b       	or	r24, r25
 352:	8e 83       	std	Y+6, r24	; 0x06
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	ae 01       	movw	r20, r28
 35a:	4a 5f       	subi	r20, 0xFA	; 250
 35c:	5f 4f       	sbci	r21, 0xFF	; 255
 35e:	62 e0       	ldi	r22, 0x02	; 2
 360:	c7 01       	movw	r24, r14
 362:	0e 94 66 01 	call	0x2cc	; 0x2cc <nRF24L01_write_register>
 366:	d7 01       	movw	r26, r14
 368:	13 96       	adiw	r26, 0x03	; 3
 36a:	ed 91       	ld	r30, X+
 36c:	fc 91       	ld	r31, X
 36e:	14 97       	sbiw	r26, 0x04	; 4
 370:	80 81       	ld	r24, Z
 372:	15 96       	adiw	r26, 0x05	; 5
 374:	0c 90       	ld	r0, X
 376:	02 c0       	rjmp	.+4      	; 0x37c <nRF24L01_listen+0x8c>
 378:	00 0f       	add	r16, r16
 37a:	11 1f       	adc	r17, r17
 37c:	0a 94       	dec	r0
 37e:	e2 f7       	brpl	.-8      	; 0x378 <nRF24L01_listen+0x88>
 380:	08 2b       	or	r16, r24
 382:	00 83       	st	Z, r16
 384:	26 96       	adiw	r28, 0x06	; 6
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	f8 94       	cli
 38a:	de bf       	out	0x3e, r29	; 62
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	cd bf       	out	0x3d, r28	; 61
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	ff 90       	pop	r15
 39a:	ef 90       	pop	r14
 39c:	df 90       	pop	r13
 39e:	08 95       	ret

000003a0 <nRF24L01_pipe_number_received>:
 3a0:	fc 01       	movw	r30, r24
 3a2:	27 85       	ldd	r18, Z+15	; 0x0f
 3a4:	2e 70       	andi	r18, 0x0E	; 14
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	35 95       	asr	r19
 3aa:	27 95       	ror	r18
 3ac:	26 30       	cpi	r18, 0x06	; 6
 3ae:	31 05       	cpc	r19, r1
 3b0:	1c f4       	brge	.+6      	; 0x3b8 <nRF24L01_pipe_number_received+0x18>
 3b2:	82 2f       	mov	r24, r18
 3b4:	93 2f       	mov	r25, r19
 3b6:	08 95       	ret
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	9f ef       	ldi	r25, 0xFF	; 255
 3bc:	08 95       	ret

000003be <nRF24L01_data_received>:
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	ec 01       	movw	r28, r24
 3c4:	eb 81       	ldd	r30, Y+3	; 0x03
 3c6:	fc 81       	ldd	r31, Y+4	; 0x04
 3c8:	20 81       	ld	r18, Z
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0d 80       	ldd	r0, Y+5	; 0x05
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <nRF24L01_data_received+0x18>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	0a 94       	dec	r0
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <nRF24L01_data_received+0x14>
 3da:	80 95       	com	r24
 3dc:	82 23       	and	r24, r18
 3de:	80 83       	st	Z, r24
 3e0:	ce 01       	movw	r24, r28
 3e2:	0e 94 75 01 	call	0x2ea	; 0x2ea <nRF24L01_update_status>
 3e6:	ce 01       	movw	r24, r28
 3e8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <nRF24L01_pipe_number_received>
 3ec:	89 2f       	mov	r24, r25
 3ee:	80 95       	com	r24
 3f0:	88 1f       	adc	r24, r24
 3f2:	88 27       	eor	r24, r24
 3f4:	88 1f       	adc	r24, r24
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <nRF24L01_clear_interrupts>:
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	1f 92       	push	r1
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
 406:	20 e7       	ldi	r18, 0x70	; 112
 408:	29 83       	std	Y+1, r18	; 0x01
 40a:	21 e0       	ldi	r18, 0x01	; 1
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	ae 01       	movw	r20, r28
 410:	4f 5f       	subi	r20, 0xFF	; 255
 412:	5f 4f       	sbci	r21, 0xFF	; 255
 414:	67 e0       	ldi	r22, 0x07	; 7
 416:	0e 94 66 01 	call	0x2cc	; 0x2cc <nRF24L01_write_register>
 41a:	0f 90       	pop	r0
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <nRF24L01_begin>:
 422:	ff 92       	push	r15
 424:	0f 93       	push	r16
 426:	1f 93       	push	r17
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	1f 92       	push	r1
 42e:	cd b7       	in	r28, 0x3d	; 61
 430:	de b7       	in	r29, 0x3e	; 62
 432:	8c 01       	movw	r16, r24
 434:	dc 01       	movw	r26, r24
 436:	ed 91       	ld	r30, X+
 438:	fc 91       	ld	r31, X
 43a:	11 97       	sbiw	r26, 0x01	; 1
 43c:	42 91       	ld	r20, -Z
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	9c 01       	movw	r18, r24
 444:	12 96       	adiw	r26, 0x02	; 2
 446:	0c 90       	ld	r0, X
 448:	12 97       	sbiw	r26, 0x02	; 2
 44a:	02 c0       	rjmp	.+4      	; 0x450 <nRF24L01_begin+0x2e>
 44c:	22 0f       	add	r18, r18
 44e:	33 1f       	adc	r19, r19
 450:	0a 94       	dec	r0
 452:	e2 f7       	brpl	.-8      	; 0x44c <nRF24L01_begin+0x2a>
 454:	24 2b       	or	r18, r20
 456:	20 83       	st	Z, r18
 458:	13 96       	adiw	r26, 0x03	; 3
 45a:	ed 91       	ld	r30, X+
 45c:	fc 91       	ld	r31, X
 45e:	14 97       	sbiw	r26, 0x04	; 4
 460:	42 91       	ld	r20, -Z
 462:	9c 01       	movw	r18, r24
 464:	15 96       	adiw	r26, 0x05	; 5
 466:	0c 90       	ld	r0, X
 468:	15 97       	sbiw	r26, 0x05	; 5
 46a:	02 c0       	rjmp	.+4      	; 0x470 <nRF24L01_begin+0x4e>
 46c:	22 0f       	add	r18, r18
 46e:	33 1f       	adc	r19, r19
 470:	0a 94       	dec	r0
 472:	e2 f7       	brpl	.-8      	; 0x46c <nRF24L01_begin+0x4a>
 474:	24 2b       	or	r18, r20
 476:	20 83       	st	Z, r18
 478:	ed 91       	ld	r30, X+
 47a:	fc 91       	ld	r31, X
 47c:	11 97       	sbiw	r26, 0x01	; 1
 47e:	40 81       	ld	r20, Z
 480:	9c 01       	movw	r18, r24
 482:	12 96       	adiw	r26, 0x02	; 2
 484:	0c 90       	ld	r0, X
 486:	12 97       	sbiw	r26, 0x02	; 2
 488:	02 c0       	rjmp	.+4      	; 0x48e <nRF24L01_begin+0x6c>
 48a:	22 0f       	add	r18, r18
 48c:	33 1f       	adc	r19, r19
 48e:	0a 94       	dec	r0
 490:	e2 f7       	brpl	.-8      	; 0x48a <nRF24L01_begin+0x68>
 492:	24 2b       	or	r18, r20
 494:	20 83       	st	Z, r18
 496:	13 96       	adiw	r26, 0x03	; 3
 498:	ed 91       	ld	r30, X+
 49a:	fc 91       	ld	r31, X
 49c:	14 97       	sbiw	r26, 0x04	; 4
 49e:	30 81       	ld	r19, Z
 4a0:	ac 01       	movw	r20, r24
 4a2:	15 96       	adiw	r26, 0x05	; 5
 4a4:	0c 90       	ld	r0, X
 4a6:	15 97       	sbiw	r26, 0x05	; 5
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <nRF24L01_begin+0x8c>
 4aa:	44 0f       	add	r20, r20
 4ac:	55 1f       	adc	r21, r21
 4ae:	0a 94       	dec	r0
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <nRF24L01_begin+0x88>
 4b2:	24 2f       	mov	r18, r20
 4b4:	20 95       	com	r18
 4b6:	23 23       	and	r18, r19
 4b8:	20 83       	st	Z, r18
 4ba:	2c b5       	in	r18, 0x2c	; 44
 4bc:	20 61       	ori	r18, 0x10	; 16
 4be:	2c bd       	out	0x2c, r18	; 44
 4c0:	2c b5       	in	r18, 0x2c	; 44
 4c2:	20 64       	ori	r18, 0x40	; 64
 4c4:	2c bd       	out	0x2c, r18	; 44
 4c6:	16 96       	adiw	r26, 0x06	; 6
 4c8:	ed 91       	ld	r30, X+
 4ca:	fc 91       	ld	r31, X
 4cc:	17 97       	sbiw	r26, 0x07	; 7
 4ce:	42 91       	ld	r20, -Z
 4d0:	9c 01       	movw	r18, r24
 4d2:	18 96       	adiw	r26, 0x08	; 8
 4d4:	0c 90       	ld	r0, X
 4d6:	18 97       	sbiw	r26, 0x08	; 8
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <nRF24L01_begin+0xbc>
 4da:	22 0f       	add	r18, r18
 4dc:	33 1f       	adc	r19, r19
 4de:	0a 94       	dec	r0
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <nRF24L01_begin+0xb8>
 4e2:	24 2b       	or	r18, r20
 4e4:	20 83       	st	Z, r18
 4e6:	19 96       	adiw	r26, 0x09	; 9
 4e8:	ed 91       	ld	r30, X+
 4ea:	fc 91       	ld	r31, X
 4ec:	1a 97       	sbiw	r26, 0x0a	; 10
 4ee:	42 91       	ld	r20, -Z
 4f0:	9c 01       	movw	r18, r24
 4f2:	1b 96       	adiw	r26, 0x0b	; 11
 4f4:	0c 90       	ld	r0, X
 4f6:	1b 97       	sbiw	r26, 0x0b	; 11
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <nRF24L01_begin+0xdc>
 4fa:	22 0f       	add	r18, r18
 4fc:	33 1f       	adc	r19, r19
 4fe:	0a 94       	dec	r0
 500:	e2 f7       	brpl	.-8      	; 0x4fa <nRF24L01_begin+0xd8>
 502:	24 2b       	or	r18, r20
 504:	20 83       	st	Z, r18
 506:	1c 96       	adiw	r26, 0x0c	; 12
 508:	ed 91       	ld	r30, X+
 50a:	fc 91       	ld	r31, X
 50c:	1d 97       	sbiw	r26, 0x0d	; 13
 50e:	22 91       	ld	r18, -Z
 510:	1e 96       	adiw	r26, 0x0e	; 14
 512:	0c 90       	ld	r0, X
 514:	02 c0       	rjmp	.+4      	; 0x51a <nRF24L01_begin+0xf8>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	0a 94       	dec	r0
 51c:	e2 f7       	brpl	.-8      	; 0x516 <nRF24L01_begin+0xf4>
 51e:	80 95       	com	r24
 520:	82 23       	and	r24, r18
 522:	80 83       	st	Z, r24
 524:	8c b5       	in	r24, 0x2c	; 44
 526:	87 7f       	andi	r24, 0xF7	; 247
 528:	8c bd       	out	0x2c, r24	; 44
 52a:	8c b5       	in	r24, 0x2c	; 44
 52c:	8b 7f       	andi	r24, 0xFB	; 251
 52e:	8c bd       	out	0x2c, r24	; 44
 530:	8c b5       	in	r24, 0x2c	; 44
 532:	8e 7f       	andi	r24, 0xFE	; 254
 534:	8c bd       	out	0x2c, r24	; 44
 536:	8c b5       	in	r24, 0x2c	; 44
 538:	8d 7f       	andi	r24, 0xFD	; 253
 53a:	8c bd       	out	0x2c, r24	; 44
 53c:	8d b5       	in	r24, 0x2d	; 45
 53e:	81 60       	ori	r24, 0x01	; 1
 540:	8d bd       	out	0x2d, r24	; 45
 542:	8c b5       	in	r24, 0x2c	; 44
 544:	8f 7d       	andi	r24, 0xDF	; 223
 546:	8c bd       	out	0x2c, r24	; 44
 548:	20 e0       	ldi	r18, 0x00	; 0
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	40 e0       	ldi	r20, 0x00	; 0
 54e:	50 e0       	ldi	r21, 0x00	; 0
 550:	62 ee       	ldi	r22, 0xE2	; 226
 552:	c8 01       	movw	r24, r16
 554:	0e 94 2b 01 	call	0x256	; 0x256 <nRF24L01_send_command>
 558:	20 e0       	ldi	r18, 0x00	; 0
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	50 e0       	ldi	r21, 0x00	; 0
 560:	61 ee       	ldi	r22, 0xE1	; 225
 562:	c8 01       	movw	r24, r16
 564:	0e 94 2b 01 	call	0x256	; 0x256 <nRF24L01_send_command>
 568:	c8 01       	movw	r24, r16
 56a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <nRF24L01_clear_interrupts>
 56e:	8f e0       	ldi	r24, 0x0F	; 15
 570:	89 83       	std	Y+1, r24	; 0x01
 572:	21 e0       	ldi	r18, 0x01	; 1
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	ae 01       	movw	r20, r28
 578:	4f 5f       	subi	r20, 0xFF	; 255
 57a:	5f 4f       	sbci	r21, 0xFF	; 255
 57c:	60 e0       	ldi	r22, 0x00	; 0
 57e:	c8 01       	movw	r24, r16
 580:	0e 94 66 01 	call	0x2cc	; 0x2cc <nRF24L01_write_register>
 584:	0f 2e       	mov	r0, r31
 586:	ff e3       	ldi	r31, 0x3F	; 63
 588:	ff 2e       	mov	r15, r31
 58a:	f0 2d       	mov	r31, r0
 58c:	f9 82       	std	Y+1, r15	; 0x01
 58e:	21 e0       	ldi	r18, 0x01	; 1
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	ae 01       	movw	r20, r28
 594:	4f 5f       	subi	r20, 0xFF	; 255
 596:	5f 4f       	sbci	r21, 0xFF	; 255
 598:	61 e0       	ldi	r22, 0x01	; 1
 59a:	c8 01       	movw	r24, r16
 59c:	0e 94 66 01 	call	0x2cc	; 0x2cc <nRF24L01_write_register>
 5a0:	f9 82       	std	Y+1, r15	; 0x01
 5a2:	21 e0       	ldi	r18, 0x01	; 1
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	ae 01       	movw	r20, r28
 5a8:	4f 5f       	subi	r20, 0xFF	; 255
 5aa:	5f 4f       	sbci	r21, 0xFF	; 255
 5ac:	6c e1       	ldi	r22, 0x1C	; 28
 5ae:	c8 01       	movw	r24, r16
 5b0:	0e 94 66 01 	call	0x2cc	; 0x2cc <nRF24L01_write_register>
 5b4:	84 e0       	ldi	r24, 0x04	; 4
 5b6:	89 83       	std	Y+1, r24	; 0x01
 5b8:	21 e0       	ldi	r18, 0x01	; 1
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	ae 01       	movw	r20, r28
 5be:	4f 5f       	subi	r20, 0xFF	; 255
 5c0:	5f 4f       	sbci	r21, 0xFF	; 255
 5c2:	6d e1       	ldi	r22, 0x1D	; 29
 5c4:	c8 01       	movw	r24, r16
 5c6:	0e 94 66 01 	call	0x2cc	; 0x2cc <nRF24L01_write_register>
 5ca:	19 82       	std	Y+1, r1	; 0x01
 5cc:	21 e0       	ldi	r18, 0x01	; 1
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	ae 01       	movw	r20, r28
 5d2:	4f 5f       	subi	r20, 0xFF	; 255
 5d4:	5f 4f       	sbci	r21, 0xFF	; 255
 5d6:	62 e0       	ldi	r22, 0x02	; 2
 5d8:	c8 01       	movw	r24, r16
 5da:	0e 94 66 01 	call	0x2cc	; 0x2cc <nRF24L01_write_register>
 5de:	0f 90       	pop	r0
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	1f 91       	pop	r17
 5e6:	0f 91       	pop	r16
 5e8:	ff 90       	pop	r15
 5ea:	08 95       	ret

000005ec <nRF24L01_clear_receive_interrupt>:
void nRF24L01_clear_transmit_interrupts(nRF24L01 *rf) {
    uint8_t data = _BV(TX_DS) | _BV(MAX_RT);
    nRF24L01_write_register(rf, STATUS, &data, 1);
}

void nRF24L01_clear_receive_interrupt(nRF24L01 *rf) {
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	1f 92       	push	r1
 5f2:	cd b7       	in	r28, 0x3d	; 61
 5f4:	de b7       	in	r29, 0x3e	; 62
 5f6:	fc 01       	movw	r30, r24
    uint8_t data = _BV(RX_DR) | rf->status;
 5f8:	97 85       	ldd	r25, Z+15	; 0x0f
 5fa:	90 64       	ori	r25, 0x40	; 64
 5fc:	99 83       	std	Y+1, r25	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
 5fe:	21 e0       	ldi	r18, 0x01	; 1
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	ae 01       	movw	r20, r28
 604:	4f 5f       	subi	r20, 0xFF	; 255
 606:	5f 4f       	sbci	r21, 0xFF	; 255
 608:	67 e0       	ldi	r22, 0x07	; 7
 60a:	cf 01       	movw	r24, r30
 60c:	0e 94 66 01 	call	0x2cc	; 0x2cc <nRF24L01_write_register>
}
 610:	0f 90       	pop	r0
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
 616:	08 95       	ret

00000618 <nRF24L01_read_received_data>:
    nRF24L01_write_register(rf, EN_RXADDR, &current_pipes, 1);

    set_high(rf->ce);
}

bool nRF24L01_read_received_data(nRF24L01 *rf, nRF24L01Message *message) {
 618:	0f 93       	push	r16
 61a:	1f 93       	push	r17
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
 620:	8c 01       	movw	r16, r24
 622:	eb 01       	movw	r28, r22
    message->pipe_number = nRF24L01_pipe_number_received(rf);
 624:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <nRF24L01_pipe_number_received>
 628:	99 83       	std	Y+1, r25	; 0x01
 62a:	88 83       	st	Y, r24
    nRF24L01_clear_receive_interrupt(rf);
 62c:	c8 01       	movw	r24, r16
 62e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <nRF24L01_clear_receive_interrupt>
    if (message->pipe_number < 0) {
 632:	88 81       	ld	r24, Y
 634:	99 81       	ldd	r25, Y+1	; 0x01
 636:	99 23       	and	r25, r25
 638:	1c f4       	brge	.+6      	; 0x640 <nRF24L01_read_received_data+0x28>
        message->length = 0;
 63a:	1a a2       	std	Y+34, r1	; 0x22
        return false;
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	17 c0       	rjmp	.+46     	; 0x66e <nRF24L01_read_received_data+0x56>
    }

    nRF24L01_read_register(rf, R_RX_PL_WID, &message->length, 1);
 640:	21 e0       	ldi	r18, 0x01	; 1
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	ae 01       	movw	r20, r28
 646:	4e 5d       	subi	r20, 0xDE	; 222
 648:	5f 4f       	sbci	r21, 0xFF	; 255
 64a:	60 e6       	ldi	r22, 0x60	; 96
 64c:	c8 01       	movw	r24, r16
 64e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <nRF24L01_read_register>

    if (message->length > 0) {
 652:	2a a1       	ldd	r18, Y+34	; 0x22
 654:	22 23       	and	r18, r18
 656:	51 f0       	breq	.+20     	; 0x66c <nRF24L01_read_received_data+0x54>
        nRF24L01_send_command(rf, R_RX_PAYLOAD, &message->data,
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	ae 01       	movw	r20, r28
 65c:	4e 5f       	subi	r20, 0xFE	; 254
 65e:	5f 4f       	sbci	r21, 0xFF	; 255
 660:	61 e6       	ldi	r22, 0x61	; 97
 662:	c8 01       	movw	r24, r16
 664:	0e 94 2b 01 	call	0x256	; 0x256 <nRF24L01_send_command>
            message->length);
    }

    return true;
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	01 c0       	rjmp	.+2      	; 0x66e <nRF24L01_read_received_data+0x56>
 66c:	81 e0       	ldi	r24, 0x01	; 1
}
 66e:	df 91       	pop	r29
 670:	cf 91       	pop	r28
 672:	1f 91       	pop	r17
 674:	0f 91       	pop	r16
 676:	08 95       	ret

00000678 <malloc>:
 678:	0f 93       	push	r16
 67a:	1f 93       	push	r17
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
 680:	82 30       	cpi	r24, 0x02	; 2
 682:	91 05       	cpc	r25, r1
 684:	10 f4       	brcc	.+4      	; 0x68a <malloc+0x12>
 686:	82 e0       	ldi	r24, 0x02	; 2
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <__flp>
 68e:	f0 91 1a 01 	lds	r31, 0x011A	; 0x80011a <__flp+0x1>
 692:	20 e0       	ldi	r18, 0x00	; 0
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	a0 e0       	ldi	r26, 0x00	; 0
 698:	b0 e0       	ldi	r27, 0x00	; 0
 69a:	30 97       	sbiw	r30, 0x00	; 0
 69c:	19 f1       	breq	.+70     	; 0x6e4 <malloc+0x6c>
 69e:	40 81       	ld	r20, Z
 6a0:	51 81       	ldd	r21, Z+1	; 0x01
 6a2:	02 81       	ldd	r16, Z+2	; 0x02
 6a4:	13 81       	ldd	r17, Z+3	; 0x03
 6a6:	48 17       	cp	r20, r24
 6a8:	59 07       	cpc	r21, r25
 6aa:	c8 f0       	brcs	.+50     	; 0x6de <malloc+0x66>
 6ac:	84 17       	cp	r24, r20
 6ae:	95 07       	cpc	r25, r21
 6b0:	69 f4       	brne	.+26     	; 0x6cc <malloc+0x54>
 6b2:	10 97       	sbiw	r26, 0x00	; 0
 6b4:	31 f0       	breq	.+12     	; 0x6c2 <malloc+0x4a>
 6b6:	12 96       	adiw	r26, 0x02	; 2
 6b8:	0c 93       	st	X, r16
 6ba:	12 97       	sbiw	r26, 0x02	; 2
 6bc:	13 96       	adiw	r26, 0x03	; 3
 6be:	1c 93       	st	X, r17
 6c0:	27 c0       	rjmp	.+78     	; 0x710 <malloc+0x98>
 6c2:	00 93 19 01 	sts	0x0119, r16	; 0x800119 <__flp>
 6c6:	10 93 1a 01 	sts	0x011A, r17	; 0x80011a <__flp+0x1>
 6ca:	22 c0       	rjmp	.+68     	; 0x710 <malloc+0x98>
 6cc:	21 15       	cp	r18, r1
 6ce:	31 05       	cpc	r19, r1
 6d0:	19 f0       	breq	.+6      	; 0x6d8 <malloc+0x60>
 6d2:	42 17       	cp	r20, r18
 6d4:	53 07       	cpc	r21, r19
 6d6:	18 f4       	brcc	.+6      	; 0x6de <malloc+0x66>
 6d8:	9a 01       	movw	r18, r20
 6da:	bd 01       	movw	r22, r26
 6dc:	ef 01       	movw	r28, r30
 6de:	df 01       	movw	r26, r30
 6e0:	f8 01       	movw	r30, r16
 6e2:	db cf       	rjmp	.-74     	; 0x69a <malloc+0x22>
 6e4:	21 15       	cp	r18, r1
 6e6:	31 05       	cpc	r19, r1
 6e8:	f9 f0       	breq	.+62     	; 0x728 <malloc+0xb0>
 6ea:	28 1b       	sub	r18, r24
 6ec:	39 0b       	sbc	r19, r25
 6ee:	24 30       	cpi	r18, 0x04	; 4
 6f0:	31 05       	cpc	r19, r1
 6f2:	80 f4       	brcc	.+32     	; 0x714 <malloc+0x9c>
 6f4:	8a 81       	ldd	r24, Y+2	; 0x02
 6f6:	9b 81       	ldd	r25, Y+3	; 0x03
 6f8:	61 15       	cp	r22, r1
 6fa:	71 05       	cpc	r23, r1
 6fc:	21 f0       	breq	.+8      	; 0x706 <malloc+0x8e>
 6fe:	fb 01       	movw	r30, r22
 700:	93 83       	std	Z+3, r25	; 0x03
 702:	82 83       	std	Z+2, r24	; 0x02
 704:	04 c0       	rjmp	.+8      	; 0x70e <malloc+0x96>
 706:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <__flp+0x1>
 70a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <__flp>
 70e:	fe 01       	movw	r30, r28
 710:	32 96       	adiw	r30, 0x02	; 2
 712:	44 c0       	rjmp	.+136    	; 0x79c <malloc+0x124>
 714:	fe 01       	movw	r30, r28
 716:	e2 0f       	add	r30, r18
 718:	f3 1f       	adc	r31, r19
 71a:	81 93       	st	Z+, r24
 71c:	91 93       	st	Z+, r25
 71e:	22 50       	subi	r18, 0x02	; 2
 720:	31 09       	sbc	r19, r1
 722:	39 83       	std	Y+1, r19	; 0x01
 724:	28 83       	st	Y, r18
 726:	3a c0       	rjmp	.+116    	; 0x79c <malloc+0x124>
 728:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <__brkval>
 72c:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <__brkval+0x1>
 730:	23 2b       	or	r18, r19
 732:	41 f4       	brne	.+16     	; 0x744 <malloc+0xcc>
 734:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 738:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 73c:	30 93 18 01 	sts	0x0118, r19	; 0x800118 <__brkval+0x1>
 740:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <__brkval>
 744:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 748:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 74c:	21 15       	cp	r18, r1
 74e:	31 05       	cpc	r19, r1
 750:	41 f4       	brne	.+16     	; 0x762 <malloc+0xea>
 752:	2d b7       	in	r18, 0x3d	; 61
 754:	3e b7       	in	r19, 0x3e	; 62
 756:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 75a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 75e:	24 1b       	sub	r18, r20
 760:	35 0b       	sbc	r19, r21
 762:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <__brkval>
 766:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <__brkval+0x1>
 76a:	e2 17       	cp	r30, r18
 76c:	f3 07       	cpc	r31, r19
 76e:	a0 f4       	brcc	.+40     	; 0x798 <malloc+0x120>
 770:	2e 1b       	sub	r18, r30
 772:	3f 0b       	sbc	r19, r31
 774:	28 17       	cp	r18, r24
 776:	39 07       	cpc	r19, r25
 778:	78 f0       	brcs	.+30     	; 0x798 <malloc+0x120>
 77a:	ac 01       	movw	r20, r24
 77c:	4e 5f       	subi	r20, 0xFE	; 254
 77e:	5f 4f       	sbci	r21, 0xFF	; 255
 780:	24 17       	cp	r18, r20
 782:	35 07       	cpc	r19, r21
 784:	48 f0       	brcs	.+18     	; 0x798 <malloc+0x120>
 786:	4e 0f       	add	r20, r30
 788:	5f 1f       	adc	r21, r31
 78a:	50 93 18 01 	sts	0x0118, r21	; 0x800118 <__brkval+0x1>
 78e:	40 93 17 01 	sts	0x0117, r20	; 0x800117 <__brkval>
 792:	81 93       	st	Z+, r24
 794:	91 93       	st	Z+, r25
 796:	02 c0       	rjmp	.+4      	; 0x79c <malloc+0x124>
 798:	e0 e0       	ldi	r30, 0x00	; 0
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	cf 01       	movw	r24, r30
 79e:	df 91       	pop	r29
 7a0:	cf 91       	pop	r28
 7a2:	1f 91       	pop	r17
 7a4:	0f 91       	pop	r16
 7a6:	08 95       	ret

000007a8 <free>:
 7a8:	cf 93       	push	r28
 7aa:	df 93       	push	r29
 7ac:	00 97       	sbiw	r24, 0x00	; 0
 7ae:	09 f4       	brne	.+2      	; 0x7b2 <free+0xa>
 7b0:	81 c0       	rjmp	.+258    	; 0x8b4 <free+0x10c>
 7b2:	fc 01       	movw	r30, r24
 7b4:	32 97       	sbiw	r30, 0x02	; 2
 7b6:	13 82       	std	Z+3, r1	; 0x03
 7b8:	12 82       	std	Z+2, r1	; 0x02
 7ba:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <__flp>
 7be:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <__flp+0x1>
 7c2:	10 97       	sbiw	r26, 0x00	; 0
 7c4:	81 f4       	brne	.+32     	; 0x7e6 <free+0x3e>
 7c6:	20 81       	ld	r18, Z
 7c8:	31 81       	ldd	r19, Z+1	; 0x01
 7ca:	82 0f       	add	r24, r18
 7cc:	93 1f       	adc	r25, r19
 7ce:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <__brkval>
 7d2:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <__brkval+0x1>
 7d6:	28 17       	cp	r18, r24
 7d8:	39 07       	cpc	r19, r25
 7da:	51 f5       	brne	.+84     	; 0x830 <free+0x88>
 7dc:	f0 93 18 01 	sts	0x0118, r31	; 0x800118 <__brkval+0x1>
 7e0:	e0 93 17 01 	sts	0x0117, r30	; 0x800117 <__brkval>
 7e4:	67 c0       	rjmp	.+206    	; 0x8b4 <free+0x10c>
 7e6:	ed 01       	movw	r28, r26
 7e8:	20 e0       	ldi	r18, 0x00	; 0
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	ce 17       	cp	r28, r30
 7ee:	df 07       	cpc	r29, r31
 7f0:	40 f4       	brcc	.+16     	; 0x802 <free+0x5a>
 7f2:	4a 81       	ldd	r20, Y+2	; 0x02
 7f4:	5b 81       	ldd	r21, Y+3	; 0x03
 7f6:	9e 01       	movw	r18, r28
 7f8:	41 15       	cp	r20, r1
 7fa:	51 05       	cpc	r21, r1
 7fc:	f1 f0       	breq	.+60     	; 0x83a <free+0x92>
 7fe:	ea 01       	movw	r28, r20
 800:	f5 cf       	rjmp	.-22     	; 0x7ec <free+0x44>
 802:	d3 83       	std	Z+3, r29	; 0x03
 804:	c2 83       	std	Z+2, r28	; 0x02
 806:	40 81       	ld	r20, Z
 808:	51 81       	ldd	r21, Z+1	; 0x01
 80a:	84 0f       	add	r24, r20
 80c:	95 1f       	adc	r25, r21
 80e:	c8 17       	cp	r28, r24
 810:	d9 07       	cpc	r29, r25
 812:	59 f4       	brne	.+22     	; 0x82a <free+0x82>
 814:	88 81       	ld	r24, Y
 816:	99 81       	ldd	r25, Y+1	; 0x01
 818:	84 0f       	add	r24, r20
 81a:	95 1f       	adc	r25, r21
 81c:	02 96       	adiw	r24, 0x02	; 2
 81e:	91 83       	std	Z+1, r25	; 0x01
 820:	80 83       	st	Z, r24
 822:	8a 81       	ldd	r24, Y+2	; 0x02
 824:	9b 81       	ldd	r25, Y+3	; 0x03
 826:	93 83       	std	Z+3, r25	; 0x03
 828:	82 83       	std	Z+2, r24	; 0x02
 82a:	21 15       	cp	r18, r1
 82c:	31 05       	cpc	r19, r1
 82e:	29 f4       	brne	.+10     	; 0x83a <free+0x92>
 830:	f0 93 1a 01 	sts	0x011A, r31	; 0x80011a <__flp+0x1>
 834:	e0 93 19 01 	sts	0x0119, r30	; 0x800119 <__flp>
 838:	3d c0       	rjmp	.+122    	; 0x8b4 <free+0x10c>
 83a:	e9 01       	movw	r28, r18
 83c:	fb 83       	std	Y+3, r31	; 0x03
 83e:	ea 83       	std	Y+2, r30	; 0x02
 840:	49 91       	ld	r20, Y+
 842:	59 91       	ld	r21, Y+
 844:	c4 0f       	add	r28, r20
 846:	d5 1f       	adc	r29, r21
 848:	ec 17       	cp	r30, r28
 84a:	fd 07       	cpc	r31, r29
 84c:	61 f4       	brne	.+24     	; 0x866 <free+0xbe>
 84e:	80 81       	ld	r24, Z
 850:	91 81       	ldd	r25, Z+1	; 0x01
 852:	84 0f       	add	r24, r20
 854:	95 1f       	adc	r25, r21
 856:	02 96       	adiw	r24, 0x02	; 2
 858:	e9 01       	movw	r28, r18
 85a:	99 83       	std	Y+1, r25	; 0x01
 85c:	88 83       	st	Y, r24
 85e:	82 81       	ldd	r24, Z+2	; 0x02
 860:	93 81       	ldd	r25, Z+3	; 0x03
 862:	9b 83       	std	Y+3, r25	; 0x03
 864:	8a 83       	std	Y+2, r24	; 0x02
 866:	e0 e0       	ldi	r30, 0x00	; 0
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	12 96       	adiw	r26, 0x02	; 2
 86c:	8d 91       	ld	r24, X+
 86e:	9c 91       	ld	r25, X
 870:	13 97       	sbiw	r26, 0x03	; 3
 872:	00 97       	sbiw	r24, 0x00	; 0
 874:	19 f0       	breq	.+6      	; 0x87c <free+0xd4>
 876:	fd 01       	movw	r30, r26
 878:	dc 01       	movw	r26, r24
 87a:	f7 cf       	rjmp	.-18     	; 0x86a <free+0xc2>
 87c:	8d 91       	ld	r24, X+
 87e:	9c 91       	ld	r25, X
 880:	11 97       	sbiw	r26, 0x01	; 1
 882:	9d 01       	movw	r18, r26
 884:	2e 5f       	subi	r18, 0xFE	; 254
 886:	3f 4f       	sbci	r19, 0xFF	; 255
 888:	82 0f       	add	r24, r18
 88a:	93 1f       	adc	r25, r19
 88c:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <__brkval>
 890:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <__brkval+0x1>
 894:	28 17       	cp	r18, r24
 896:	39 07       	cpc	r19, r25
 898:	69 f4       	brne	.+26     	; 0x8b4 <free+0x10c>
 89a:	30 97       	sbiw	r30, 0x00	; 0
 89c:	29 f4       	brne	.+10     	; 0x8a8 <free+0x100>
 89e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__flp+0x1>
 8a2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__flp>
 8a6:	02 c0       	rjmp	.+4      	; 0x8ac <free+0x104>
 8a8:	13 82       	std	Z+3, r1	; 0x03
 8aa:	12 82       	std	Z+2, r1	; 0x02
 8ac:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <__brkval+0x1>
 8b0:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <__brkval>
 8b4:	df 91       	pop	r29
 8b6:	cf 91       	pop	r28
 8b8:	08 95       	ret

000008ba <strcmp>:
 8ba:	fb 01       	movw	r30, r22
 8bc:	dc 01       	movw	r26, r24
 8be:	8d 91       	ld	r24, X+
 8c0:	01 90       	ld	r0, Z+
 8c2:	80 19       	sub	r24, r0
 8c4:	01 10       	cpse	r0, r1
 8c6:	d9 f3       	breq	.-10     	; 0x8be <strcmp+0x4>
 8c8:	99 0b       	sbc	r25, r25
 8ca:	08 95       	ret

000008cc <_exit>:
 8cc:	f8 94       	cli

000008ce <__stop_program>:
 8ce:	ff cf       	rjmp	.-2      	; 0x8ce <__stop_program>
