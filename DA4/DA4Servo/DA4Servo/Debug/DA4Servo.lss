
DA4Servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000d0  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008a7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000178  00000000  00000000  000008f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000f0  00000000  00000000  00000a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001a6  00000000  00000000  00000b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000e5  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000024  00000000  00000000  00000e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00000e31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>

int main(void)
{
	int i;
	DDRD = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	TCCR0B = 3;
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	85 bd       	out	0x25, r24	; 37
	TCCR0A = 0x83;
  88:	83 e8       	ldi	r24, 0x83	; 131
  8a:	84 bd       	out	0x24, r24	; 36
	
	while (1)
	{
		for(i=0; i<10; i++)
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	90 e0       	ldi	r25, 0x00	; 0
		{
			OCR0A = 15;
  90:	5f e0       	ldi	r21, 0x0F	; 15
			_delay_ms(1000);
			OCR0A = 30;
  92:	4e e1       	ldi	r20, 0x1E	; 30
	TCCR0B = 3;
	TCCR0A = 0x83;
	
	while (1)
	{
		for(i=0; i<10; i++)
  94:	20 e0       	ldi	r18, 0x00	; 0
  96:	30 e0       	ldi	r19, 0x00	; 0
		{
			OCR0A = 15;
  98:	57 bd       	out	0x27, r21	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	6f e3       	ldi	r22, 0x3F	; 63
  9c:	7d e0       	ldi	r23, 0x0D	; 13
  9e:	e3 e0       	ldi	r30, 0x03	; 3
  a0:	61 50       	subi	r22, 0x01	; 1
  a2:	70 40       	sbci	r23, 0x00	; 0
  a4:	e0 40       	sbci	r30, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x20>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x2a>
  aa:	00 00       	nop
			_delay_ms(1000);
			OCR0A = 30;
  ac:	47 bd       	out	0x27, r20	; 39
  ae:	6f e3       	ldi	r22, 0x3F	; 63
  b0:	7d e0       	ldi	r23, 0x0D	; 13
  b2:	e3 e0       	ldi	r30, 0x03	; 3
  b4:	61 50       	subi	r22, 0x01	; 1
  b6:	70 40       	sbci	r23, 0x00	; 0
  b8:	e0 40       	sbci	r30, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x34>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x3e>
  be:	00 00       	nop
	TCCR0B = 3;
	TCCR0A = 0x83;
	
	while (1)
	{
		for(i=0; i<10; i++)
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	8a 30       	cpi	r24, 0x0A	; 10
  c4:	91 05       	cpc	r25, r1
  c6:	44 f3       	brlt	.-48     	; 0x98 <main+0x18>
  c8:	c9 01       	movw	r24, r18
  ca:	e6 cf       	rjmp	.-52     	; 0x98 <main+0x18>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
