
DA4DC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000110  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000110  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008eb  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000091a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000af  00000000  00000000  00000942  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000007c  00000000  00000000  000009f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000f3  00000000  00000000  00000a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00000b60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000091  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00000c39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000c82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_1>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  8e:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_1>:
#include <avr/interrupt.h>

int check = 1;

ISR(INT0_vect)
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	if(check == 1)
  a4:	80 91 00 01 	lds	r24, 0x0100
  a8:	90 91 01 01 	lds	r25, 0x0101
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	29 f4       	brne	.+10     	; 0xba <__vector_1+0x24>
	check = 0;
  b0:	10 92 01 01 	sts	0x0101, r1
  b4:	10 92 00 01 	sts	0x0100, r1
  b8:	06 c0       	rjmp	.+12     	; 0xc6 <__vector_1+0x30>
	else
	check = 1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	90 93 01 01 	sts	0x0101, r25
  c2:	80 93 00 01 	sts	0x0100, r24
}
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <main>:

int main(void)
{
	DDRD = 0xFF;
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0xFF;
  d8:	87 b9       	out	0x07, r24	; 7
	PORTC = 0xFF;
  da:	88 b9       	out	0x08, r24	; 8
	TCCR0B = 5;
  dc:	85 e0       	ldi	r24, 0x05	; 5
  de:	85 bd       	out	0x25, r24	; 37
	TCCR0A = 0x83;
  e0:	83 e8       	ldi	r24, 0x83	; 131
  e2:	84 bd       	out	0x24, r24	; 36
	
	EICRA = 0x03;
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	80 93 69 00 	sts	0x0069, r24
	EIMSK = (1 << INT0);
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	8d bb       	out	0x1d, r24	; 29
	EIFR = (1 << INTF0);
  ee:	8c bb       	out	0x1c, r24	; 28
	sei();
  f0:	78 94       	sei
	
	while (1)
	{
		if(check == 1)
		{
			PORTC = 1;
  f2:	31 e0       	ldi	r19, 0x01	; 1
			OCR0A = 50;
  f4:	22 e3       	ldi	r18, 0x32	; 50
	EIFR = (1 << INTF0);
	sei();
	
	while (1)
	{
		if(check == 1)
  f6:	80 91 00 01 	lds	r24, 0x0100
  fa:	90 91 01 01 	lds	r25, 0x0101
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	19 f4       	brne	.+6      	; 0x108 <main+0x34>
		{
			PORTC = 1;
 102:	38 b9       	out	0x08, r19	; 8
			OCR0A = 50;
 104:	27 bd       	out	0x27, r18	; 39
 106:	f7 cf       	rjmp	.-18     	; 0xf6 <main+0x22>
		}
		else
		{
			PORTC = 0;
 108:	18 b8       	out	0x08, r1	; 8
 10a:	f5 cf       	rjmp	.-22     	; 0xf6 <main+0x22>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
