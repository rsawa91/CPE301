
task3C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006fd  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065e  00000000  00000000  00000891  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000276  00000000  00000000  00000eef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001168  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037a  00000000  00000000  0000118c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001506  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000154e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <avr/delay.h>

int main(void)
{
	DDRB = 32;		//set PORTB 5 to output
  80:	80 e2       	ldi	r24, 0x20	; 32
  82:	84 b9       	out	0x04, r24	; 4
	TCCR0B = 13;	//set prescaler to 1024
  84:	8d e0       	ldi	r24, 0x0D	; 13
  86:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;		//set TCNT to 0
  88:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0x00F3;	//set max value to F3
  8a:	83 ef       	ldi	r24, 0xF3	; 243
  8c:	87 bd       	out	0x27, r24	; 39
	
	while (1)
	{
		if((TIFR0 & 0b00000001) == 0b00000001)	//check for overflow
		{
			PORTB = 0xFF;		//set PORTB to FF
  8e:	8f ef       	ldi	r24, 0xFF	; 255
	TCNT0 = 0;		//set TCNT to 0
	OCR0A = 0x00F3;	//set max value to F3
	
	while (1)
	{
		if((TIFR0 & 0b00000001) == 0b00000001)	//check for overflow
  90:	a8 9b       	sbis	0x15, 0	; 21
  92:	09 c0       	rjmp	.+18     	; 0xa6 <main+0x26>
		{
			PORTB = 0xFF;		//set PORTB to FF
  94:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	e3 e2       	ldi	r30, 0x23	; 35
  98:	f4 ef       	ldi	r31, 0xF4	; 244
  9a:	31 97       	sbiw	r30, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <main+0x1a>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x20>
  a0:	00 00       	nop
			_delay_ms(250);		//delay for 250ms
			TCNT0 = 0;			//reset counter to 0
  a2:	16 bc       	out	0x26, r1	; 38
  a4:	f5 cf       	rjmp	.-22     	; 0x90 <main+0x10>
		}
		else
		PORTB = 0x00;		//set PORTB to 0
  a6:	15 b8       	out	0x05, r1	; 5
  a8:	f3 cf       	rjmp	.-26     	; 0x90 <main+0x10>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
