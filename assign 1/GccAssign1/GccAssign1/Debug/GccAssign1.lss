
GccAssign1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000c0  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000897  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000008c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000104  00000000  00000000  000008e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000006b  00000000  00000000  000009ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000004d  00000000  00000000  00000a55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000030  00000000  00000000  00000aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000090  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f6  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00000c5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


#include <avr/io.h>

int main()
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	e2 e2       	ldi	r30, 0x22	; 34
  86:	f2 e0       	ldi	r31, 0x02	; 2
	int *X = 0x0222;
	int *Y = 0x0400;
	int *Z = 0x0600;
  88:	c0 e0       	ldi	r28, 0x00	; 0
  8a:	d6 e0       	ldi	r29, 0x06	; 6
#include <avr/io.h>

int main()
{
	int *X = 0x0222;
	int *Y = 0x0400;
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b4 e0       	ldi	r27, 0x04	; 4
	
	for(a=0; a<300; a++)
	{
		sum = 0;
		sum = X;
		*X = sum;
  90:	cf 01       	movw	r24, r30
  92:	99 27       	eor	r25, r25
  94:	81 93       	st	Z+, r24
  96:	91 93       	st	Z+, r25
		if(sum/5 == 0)
  98:	2e 2f       	mov	r18, r30
  9a:	22 50       	subi	r18, 0x02	; 2
  9c:	25 30       	cpi	r18, 0x05	; 5
  9e:	18 f4       	brcc	.+6      	; 0xa6 <main+0x26>
		{
			*Y = sum;
  a0:	8d 93       	st	X+, r24
  a2:	9d 93       	st	X+, r25
  a4:	02 c0       	rjmp	.+4      	; 0xaa <main+0x2a>
			R16 = sum;
			R17 = sum;
		}
		else
		{
			*Z = sum;
  a6:	89 93       	st	Y+, r24
  a8:	99 93       	st	Y+, r25
	char R16;
	char R17;
	char R18;
	char R19;
	
	for(a=0; a<300; a++)
  aa:	ea 37       	cpi	r30, 0x7A	; 122
  ac:	84 e0       	ldi	r24, 0x04	; 4
  ae:	f8 07       	cpc	r31, r24
  b0:	79 f7       	brne	.-34     	; 0x90 <main+0x10>
			R18 = sum;
			R19 = sum;
		}
		X++;
	}
}
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
